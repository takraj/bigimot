#summary A konzultációkon elhangzottak összefoglalása.

= Tartalomjegyzék =

<wiki:toc max_depth="3" />

= -1. Konzultáció (2010.02.01., hely: msn) =

Jelenlévők: Boros, Rapp, Molnár, Takács

  * Kijelöltük a csapatkapitányt: *Dávid*
  * Cspatnevet választottunk: *Bigimot*
  * Alapvető adminisztratív dolgok...

= 0. Konzultáció (2010.02.08., hely: IB026) =

LZ. tartotta, eligazítás volt a tárggyal kapcsolatban.

  * RUP-ban kell elkészíteni a projektet.
  * Először csak egy karakteres felületű program legyen, kifejezetten tesztelési célokra.
  * A későbbi grafikus felületre ne pazaroljunk túl sok időt. Elegendő, ha csak működik valahogy.
  * Idén könyebb dolgunk lesz, mert már kész vannak a dokumentációhoz a templatek.
  * Holnap délutánig kikerül a pontos feladatspecifikáció.
  * A specifikációt kis mértékben megváltoztatják a szkeleton elkészülését követően.
  * A hallgatók 90%-a sikeresen teljesíti a tárgyat, nagyrészük 5-össel.
  * Ha valaki kiesik a munkából azonnal szólni kell, illetve bele kell írni a jegyzőkönyvbe.
  * A félév során 3 demó lesz, ilyenkor minden csapat egy másik csapat programját teszteli.
  * A programnak alap JAVAC -al fordulnia kell. Érdemes beadás előtt kipróbálni a HSZK-ban.
  * A projekt hardver-, és szoftverkövetelménye fixen a HSZK-s gépekkel egyeznek meg. Ezt dokumentálni kell az elején.
  * Minden dokumentációt frissen kell tartani. Tehát, amennyiben egy hibát kijavítunk, és ezért vissza kell nyúlni egy korábban beadott dokumentumhoz, úgy a módosítást elvégezzük, de nem adjuk be az új változatot csak a legvégén. Mindenesetre írjunk a módosításról egy rövid jegyzőkönyvet.
  * A project eleje lesz inkább a nehezebb, hogy ne ütközzön más tárgyak teendőivel.
  * A konzultációkon értékelik az előzőleg beadott feladatokat és tippeket adnak a következőre, szóval érdemes megjelenni.



LZ. adott egy példát, hogy milyen változtatásra lehet számítani:
  * Pl. adott egy program ami négyzetes mátrixokkal számol. Változtatás: négyzetes helyett legyen méhsejt alakú.
  * Nem kell nagy változtatásra számítani, főleg egy jól megtervezett modell esetén.

= 1. Konzultáció (2010.02.15., hely: R.4M) =

  * Konzulensek elérhetőségeit ismertették.
  * Csütörtökön van az anyagleadás, 11:45 - 12:15
  * Megegyeztünk, hogy minden anyag legyen kész csütörtök reggel 09:00-re.
  * Konzultáción mindig értékelni fogják az előző heti munkánkat.
  * Ha nem sikerül a megadott időben leadni a heti anyagot, akkor mindenképp e-mailezzünk a *konzulensnek*.
  * _A konzulensek elérhetőségeit beírtam az [Elerhetosegek] lapba._

== RUP, milestones ==

  # modell
  # szkeleton
  # proto
  # grafikus

=== I. Modell ===

  * A legfontosabb mérföldkő.
  * A feladat *szövegéből* kell készíteni egy *UML* modellt.
    # osztálydiagram
    # belső működés: hívások, szekvencia diagramm, state chartok, stb...

=== II. Szkeleton ===

  * Ez egy konzolos JAVA alkalmazás
  * Kérdés - Válasz struktúra, jól tesztelhető, hogy mi mit reagál egy bizonyos bemenetre.
  * Tulajdonképp elkészítjük a program vázát, de a metódusok törzsét nem írjuk meg, csak amennyire feltétlenül szükséges.
  * Célszerű megoldás, hogy ezek a metódusok egymást hívogatják.

=== III. Proto ===

  * Függvénytörzsek megírása.
  * Teljes játék összeáll, de még csak konzolos felülete van.
  * Alkalmas a tesztfuttatásra.

=== IV. Grafikus felület ===

  * Csak annyira amennyire szükséges.
  * Nem a csicsa fogja az értékelés alapját adni, hanem a mögötte lévő modell.

== A laborban lévő JAVA verzió ==

  * A laborban *1.6.0_14*-es JAVA runtime van.
  * Ellenőrzés: {{{ java -version }}}
  * Kizárólag erre fejleszthetünk, addonok használata nem megengedett.

== Segítség a dokumentációhoz ==

  * Már megvannak a doksi vázak, mindössze be kell írni amit kér.

=== 2.3 Feladatleírás ===

  * Nem átfogalmazás.
  * Ki irányítja? Ki mozog magától?
  * *Tipp:* Játékos irányítja a rablót/rendőrt, de esetleg lehet 2-player-mode is benne.
  * Az utak egysávosak/kétsávosak?
  * Milyenek a kanyarok?
  * *Tipp:* Csináljuk 90°-osra, de számítsunk olyan módosításra, hogy bármilyen fokosak lehetnek esetleg.
  * Táblákat mi találjuk ki.
  * *Tipp:* Legyen STOP és JELZŐLÁMPA, de ne legyen pl. ELSŐBBSÉGADÁS KÖTELEZŐ.

=== 2.5 Use Case ===

  * Legyen egyszerű, fölösleges túlbonyolítani.
  * Kilépés is szerepeljen rajta.
  * Csak olyat tüntessünk fel rajta, amit a felhasználó képes a mi "fekete doboz"-unkkal csinálni. Tehát csak az ő interakciói szerepeljenek rajta.

== Mi lesz a következő héten? ==

  * Osztályok meghatározása a mostani doksi alapján.
  * NE LEGYEN ISTEN OBJEKTUM!!!!!
  * Legyen az egész játék amolyan Pac-Man jellegű.
  * Minél jobban általánosítsunk, használjunk interface-eket.

= 2. Konzultáció (2010.02.22., hely: R.4M) =

  * Autók nem ismerhetik a többi autót.
  * Ne legyen isten objektumunk.
  * 3.1: Mi mire való?
  * 3.2: Az attribútum az objektum állapotát írja le.
  * 3.3: Class Diagram
  * 3.4: Szekvencia Diagram, amiből majd kód lesz. Class Diagramal konzisztens legyen. Legyen belőle inicializálás is, ami nem csak függvények végighívása, meg create. Tehát követhető legyen az alapján, hogy mi zajlik le, mikor elkészül a pálya pl.
  * 3.5: State Chart, pl. rendőr.
  * Mindenképp egyszálú legyen a program, tehát nincs aszinkron hívás.
  * Márc 22-én szkeleton teszt, úgy készüljünk. Mindenkinek kötelező a megjelenés!!
  * Doksinál nagyon kell figyelni a külalakra! Legyen sorkizárt, és helyesírás szempontjából kifogástalan. Használjunk elválasztásokat!

== Megjegyzések a mi munkánkkal kapcsolatban ==

  * Tulajdonképp nem volt sok baj vele, néhol rosszul volt megfogalmazva a dolog.
  * Ajánlották, hogy ne bonyolódjunk bele a többsávos utakba, és ne "gondolkodjon" a rendőr. Elég, ha csak mászkál, és ha nekimegyünk akkor Game Over.
  * Előzést úgy kéne megoldani, hogy egyszerűen átugorják egymást a kocsik.
  * Lényeg, hogy kicsit túlspecifikáltuk, lazítsunk rajta, mert az a tapasztalat, hogy egy ilyen projektet nem tudnak a csapatok időre befejezni.


= 3. Konzultáció (2010.03.01., hely: R.4M) =

  * Szkeleton: Írja ki a képernyőre, h milyen függvényhívások zajlanak le.
  * Minimálisan szükséges objektumokat példányosítsunk csak.
  * NINCS játéklogika!!
  * Kérje be a tesztelőtől, h merre menjen kereszteződésben a tetszőleges autó.
  * 5.1-ben pl. milyen szituációt szeretne látni a felhasználó?
  * 5.2: nem kell túl sokat írni, nem is nagyon tudnánk.
  * 5.3: tkp. "Ezt fogja látni a felhasználó...", tételesen írjuk le. Mindenről legyen use-case is!
  * 5.4: Ugyanaz kb., mint a 3. és a 4. doksinál.
  * Ha valamit módosítunk a modellen, akkor adjuk be Appendixként.

== Megjegyzések a mi munkánkkal kapcsolatban ==

  * Class Diagramot át kell alakítani.
  * Szekvenciadiagramot kicsit pontosítani.
  * A leírások néhol ellentmondanak, illetve hiányosak.
  * Dolgozzunk jobban össze.
  * State-Chart és init szekvenciadiagram rendben van.
  * Bármi gond van, nyugodtan írjunk e-mailt.
  * 8 pont a 20-ból.

= 4. Konzultáció (2010.03.08., hely: R.4M) =

  * Március 15-én szünet lesz, de csütörtökre le kell adni ettől függetlenül a feladatot.
  * Március 22-én közös *szkeleton* teszt lesz, *MINDEN CSAPATTAG JELENJEN MEG!!*

== 5. beadandó infói ==

  * Architektúra részben le kell írni, hogy:
    * A program 1 szálon fut, nem foglalkozunk szálkezeléssel.
    * Csinálni kell egy osztályt a felhasználói I/O-hoz, amit nagyjából le kell itt dokumentálni. Ezt a későbbiek folyamán nem használjuk fel.
  * Még nem foglalkozunk az MVC elvekkel.
  * A szkeletonban nincs logika, mindent a felhasználó irányít. Pl. elágazásnál megkérdezi. Ezeket use-case-en ábrázolni kell.
  * Sok extra use-case lesz, minden interakciós lehetőségről.
  * Amiről van szekvencia diagram, az feltétlen játszódjon le a szkeletonban.
  * Célszerű letölteni egy már kész szkeletont, és áttanulmányozni.

== 6. beadandó infói ==

  * A kódot fel kell tölteni, a doksit ki kell nyomtatni.
  * Határidő ugyanaz mindkettőre.
  * Kritériumok:
    * Egyetlen szabványos *ZIP* fájl legyen.
    * Összesen 3x kísérelhetjük meg a feltöltést, utána a rendszer blokkol.
    * *_KELL_* csinálni JavaDOC-ot, amit csatolunk a program mellé.
      * Ez egy generált dokumentum.
      * NetBeans és Eclipse tudja.
      * Szabványos kommentezésből készül.
      * A legtöbb fejlesztőkörnyezet ad hozzá némi támogatást.
    * Csak a forráskódot ({{{*.java}}}) szabad feltölteni, {{{*.class}}} fájlokat nem!
    * Nem tölthetjük fel az egész projektmappát, úgyis konzolról fordítunk.
  * Ha nem fordul le a HSZK-ban valamiért a program, akkor már nincs lehetőség a projekt folytatására, megbuktunk. Mindenképp célszerű kipróbálni teszt előtt itt is.

=== 6.1 ===

  * Hogyan fordítjuk, hogyan indítjuk?
  * Nagyon részletesen kell!
  * Mindenképp konzolos fordítás!
  * Csinálhatunk batch fájlt, amit mellékelünk feltöltéskor. Külön fordításra, külön futtatásra.
  * Alapból a HSZK gépein nincsenek beállítva a környezeti változók, erről nekünk kell gondoskodnunk. ({{{PATH=...}}})
  * *HSZK*-ban a javac.exe és a java.exe elérési útja:
    * {{{D:\Program Files\Java\jdk1.6.0_14\bin}}}

=== 6.1.1 ===

Tételesen a feltöltött fájlok, de a javadoc-ot nem kell felsorolni, csak a zip-et, amiben megtalálható.

=== 6.2 ===

  * Értékelés, hogy eddig hogy sikerült a csapatnak összerázódnia, együttműködnie.
  * Hogy sikerült a munkamegosztás? Táblázatba beírni %-ban is!
    * A táblázatból hiányzik az aláírás mező, de ettől még *ALÁ KELL ÍRNI MINDENKINEK!*
  * Ha voltak konfliktusok, akkor azokat is le kell írni.

== Megjegyzések a mi munkánkkal kapcsolatban ==

  * Class Diagram-ban volt egy elvi hiba: nem szabad *változóval* eldönteni, hogy ki micsoda. Függvényt kell írni, és azt felüldefiniálni. Ez az épületek résznél volt.
  * Szekvencia Diagramokból nem derült ki, hogy mi történik kiértékeléskor.
  * 18 pont a 30-ból.